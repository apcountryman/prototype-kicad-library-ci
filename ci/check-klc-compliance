#!/usr/bin/env bash

# prototype-kicad-library-ci

# File: ci/analyze
# Description: prototype-kicad-library-ci repository CI KLC compliance check script.

function error()
{
    local -r message="$1"

    ( >&2 echo "$mnemonic: $message" )
}

function abort()
{
    if [[ "$#" -gt 0 ]]; then
        local -r message="$1"

        error "$message, aborting"
    fi

    exit 1
}

function display_help_text()
{
    echo "NAME"
    echo "    $mnemonic - Check if the library complies with the KLC."
    echo "SYNOPSIS"
    echo "    $mnemonic --help"
    echo "    $mnemonic --version"
    echo "    $mnemonic [--check-symbols]"
    echo "OPTIONS"
    echo "    --help"
    echo "        Display this help text."
    echo "    --check-symbols"
    echo "        Check library symbols for KLC compliance."
    echo "    --version"
    echo "        Display the version of this script."
    echo "EXAMPLES"
    echo "    $mnemonic --help"
    echo "    $mnemonic --version"
    echo "    $mnemonic --check-symbols"
}

function display_version()
{
    echo "$mnemonic, version $version"
}

function check_symbols_for_klc_compliance()
{
    local symbols; mapfile -t symbols < <( git -C "$repository" ls-files '*.lib' | xargs -r -d '\n' -I '{}' find "$repository/{}" ); readonly symbols

    if [[ "${#symbols[@]}" -ne 0 ]]; then
        if ! "$repository/utilities/kicad-library-utils/schlib/checklib.py" -s -vv "${symbols[@]}"; then
            abort
        fi
    fi
}

function main()
{
    local -r script=$( readlink -f "$0" )
    local -r mnemonic=$( basename "$script" )
    local -r repository=$( readlink -f "$( dirname "$script" )/.." )
    local -r version=$( git -C "$repository" describe --match=none --always --dirty --broken )

    while [[ "$#" -gt 0 ]]; do
        local argument="$1"; shift

        case "$argument" in
            --help)
                display_help_text
                exit
                ;;
            --check-symbols)
                if [[ -z "$check_symbols" ]]; then
                    local -r check_symbols="check-symbols"
                fi
                ;;
            --version)
                display_version
                exit
                ;;
            --*)
                ;&
            -*)
                abort "'$argument' is not a supported option"
                ;;
            *)
                abort "'$argument' is not a valid argument"
                ;;
        esac
    done

    if [[ -n "$check_symbols" ]]; then
        check_symbols_for_klc_compliance
    fi
}

main "$@"
